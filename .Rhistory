coords <- coords_array[, , i]
for (j in 1:p) {
spheres3d(coords[j, 1], coords[j, 2], coords[j, 3], radius = 5, color = colors[j])
}
}
files <- list.files(path = "C:/Users/Public/Documents/Git/Jax-Programs/R/Skull Landmarking Results/", pattern="\\.csv$", full.names=TRUE, recursive=TRUE)
# Read and process each file
landmark_list <- list()
label_list <- list()
for (file in files) {
data <- read.csv(file, skip = 1)
labels <- data[, c("Name")] # Save first column (landmark labels)
landmark_list[[length(landmark_list) + 1]] <- as.matrix(data[, c("X", "Y", "Z")])
label_list[[length(label_list) + 1]] <- labels
}
p <- nrow(landmark_list[[1]])
k <- 3
n <- length(landmark_list)
coords_array <- array(unlist(landmark_list), dim = c(p, k, n))
# Plot the first specimen with labels
open3d()
colors <- distinctColorPalette(p) # Assign a unique color to each specimen
for (i in 1:n) {
coords <- coords_array[, , i]
for (j in 1:p) {
spheres3d(coords[j, 1], coords[j, 2], coords[j, 3], radius = 5, color = colors[j])
}
}
# Assume landmarks is a numeric 3D array: (num_points x 3 x num_specimens).
# Select a reference specimen (e.g., specimen 1).
# Install and load required packages:
# install.packages("pracma")  # for cross product and robust norm calculation
library(geomorph)
library(rgl)
library(pracma)
# Choose the reference specimen that will define the orientation/plane.
files <- list.files(path = "C:/Users/Public/Documents/Git/Jax-Programs/R/Skull Landmarking Results/", pattern="\\.csv$", full.names=TRUE, recursive=TRUE)
# Read and process each file
landmark_list <- list()
label_list <- list()
for (file in files) {
data <- read.csv(file, skip = 1)
labels <- data[, c("Name")] # Save first column (landmark labels)
landmark_list[[length(landmark_list) + 1]] <- as.matrix(data[, c("X", "Y", "Z")])
label_list[[length(label_list) + 1]] <- labels
}
p <- nrow(landmark_list[[1]])
k <- 3
n <- length(landmark_list)
landmarks <- array(unlist(landmark_list), dim = c(p, k, n))
# Helper Function: Compute a rotation matrix from an angle and an axis (using quaternions)
rotationMatrix <- function(angle, axis) {
axis <- axis / norm(axis, type = "2")
a <- cos(angle / 2)
b <- -axis[1] * sin(angle / 2)
c <- -axis[2] * sin(angle / 2)
d <- -axis[3] * sin(angle / 2)
R <- matrix(c(a*a + b*b - c*c - d*d, 2*(b*c - a*d),         2*(b*d + a*c),
2*(b*c + a*d),         a*a + c*c - b*b - d*d, 2*(c*d - a*b),
2*(b*d - a*c),         2*(c*d + a*b),         a*a + d*d - b*b - c*c),
nrow = 3, byrow = TRUE)
return(R)
}
# Assume "landmarks" is an array: num_points x 3 x num_specimens.
# We choose specimen 1 as our reference.
ref_index <- length(files)-5
ref_landmarks <- landmarks[,,ref_index]
ref_centroid <- colMeans(ref_landmarks)
ref_centered <- sweep(ref_landmarks, 2, ref_centroid, "-")
# Define the primary axis for the reference based on chosen landmark indices.
# Here we choose landmarks 1 and 2.
primary_ref_vector <- ref_centered[2, ] - ref_centered[1, ]
primary_ref_vector <- primary_ref_vector / norm(primary_ref_vector, type = "2")
# For consistency, force the reference primary axis to point along the x-axis.
# Compute a pre-rotation that rotates primary_ref_vector to [1, 0, 0]:
rotate_to_x <- function(v) {
target <- c(1, 0, 0)
cross_v <- cross(v, target)
norm_cv <- norm(cross_v, type = "2")
if (norm_cv < 1e-8) {
return(diag(3))
}
angle <- acos(min(max(sum(v * target), -1), 1))  # safe acos
# Use our helper to compute the rotation
return(rotationMatrix(angle, cross_v))
}
R_pre_ref <- rotate_to_x(primary_ref_vector)
# Rotate the reference configuration so that its primary axis is along x
ref_centered_rot <- t(R_pre_ref %*% t(ref_centered))
# Also update the reference primary axis (should now be [1,0,0] or close)
primary_ref_vector <- c(1, 0, 0)
# Prepare an array to store the aligned landmarks.
aligned_landmarks <- array(NA, dim=dim(landmarks))
# Tolerance (in radians) to decide if an extra rotation is needed.
tol <- 0.2  # Adjust tolerance as needed (~11.5째)
# Loop over specimens
for(i in 1:dim(landmarks)[3]){
specimen <- landmarks[,,i]
specimen_centroid <- colMeans(specimen)
specimen_centered <- sweep(specimen, 2, specimen_centroid, "-")
# Compute standard SVD-based rotation to align to the (non pre-rotated) reference.
C <- t(specimen_centered) %*% ref_centered
svd_C <- svd(C)
R_opt <- svd_C$v %*% t(svd_C$u)
if(det(R_opt) < 0){
svd_C$v[,3] <- -svd_C$v[,3]
R_opt <- svd_C$v %*% t(svd_C$u)
}
specimen_rotated <- specimen_centered %*% R_opt
# Apply the pre-rotation used for the reference:
specimen_rotated <- t(R_pre_ref %*% t(specimen_rotated))
# Compute the primary axis for the specimen (landmark 2 - landmark 1).
primary_spec_vector <- specimen_rotated[2, ] - specimen_rotated[1, ]
primary_spec_vector <- primary_spec_vector / norm(primary_spec_vector, type = "2")
# Calculate the angle between the specimen primary axis and the target axis ([1,0,0]).
dotval <- sum(primary_spec_vector * primary_ref_vector)
# Ensure dotval is between -1 and 1
dotval <- min(max(dotval, -1), 1)
angle_diff <- acos(dotval)
# If the difference is near 90째 (or another unexpected angle), apply an extra rotation.
if(abs(angle_diff - pi/2) < tol) {
# Define the correction: rotate by the difference (pi/2 - angle_diff) about an axis perpendicular to primary_spec_vector and target.
correction_angle <- (pi/2) - angle_diff
correction_axis <- cross(primary_spec_vector, primary_ref_vector)
if (norm(correction_axis, type = "2") > 1e-8) {
correction_axis <- correction_axis / norm(correction_axis, type = "2")
R_corr <- rotationMatrix(correction_angle, correction_axis)
specimen_rotated <- t(R_corr %*% t(specimen_rotated))
}
}
# Finally, translate the rotated specimen to the reference centroid.
aligned_landmarks[,,i] <- specimen_rotated + matrix(ref_centroid, nrow(specimen_rotated), 3, byrow = TRUE)
}
# Visualize: reference in red, specimen 2 (as an example) in blue.
open3d()
points3d(ref_landmarks, col = "red", size = 10)
points3d(aligned_landmarks[,,2], col = "blue", size = 10)
# Define the primary axis for the reference based on chosen landmark indices.
# Here we choose landmarks 1 and 2.
primary_ref_vector <- ref_centered[20, ] - ref_centered[19, ]
primary_ref_vector <- primary_ref_vector / norm(primary_ref_vector, type = "2")
# For consistency, force the reference primary axis to point along the x-axis.
# Compute a pre-rotation that rotates primary_ref_vector to [1, 0, 0]:
rotate_to_x <- function(v) {
target <- c(1, 0, 0)
cross_v <- cross(v, target)
norm_cv <- norm(cross_v, type = "2")
if (norm_cv < 1e-8) {
return(diag(3))
}
angle <- acos(min(max(sum(v * target), -1), 1))  # safe acos
# Use our helper to compute the rotation
return(rotationMatrix(angle, cross_v))
}
R_pre_ref <- rotate_to_x(primary_ref_vector)
# Rotate the reference configuration so that its primary axis is along x
ref_centered_rot <- t(R_pre_ref %*% t(ref_centered))
# Also update the reference primary axis (should now be [1,0,0] or close)
primary_ref_vector <- c(1, 0, 0)
# Prepare an array to store the aligned landmarks.
aligned_landmarks <- array(NA, dim=dim(landmarks))
# Tolerance (in radians) to decide if an extra rotation is needed.
tol <- 0.2  # Adjust tolerance as needed (~11.5째)
# Loop over specimens
for(i in 1:dim(landmarks)[3]){
specimen <- landmarks[,,i]
specimen_centroid <- colMeans(specimen)
specimen_centered <- sweep(specimen, 2, specimen_centroid, "-")
# Compute standard SVD-based rotation to align to the (non pre-rotated) reference.
C <- t(specimen_centered) %*% ref_centered
svd_C <- svd(C)
R_opt <- svd_C$v %*% t(svd_C$u)
if(det(R_opt) < 0){
svd_C$v[,3] <- -svd_C$v[,3]
R_opt <- svd_C$v %*% t(svd_C$u)
}
specimen_rotated <- specimen_centered %*% R_opt
# Apply the pre-rotation used for the reference:
specimen_rotated <- t(R_pre_ref %*% t(specimen_rotated))
# Compute the primary axis for the specimen (landmark 2 - landmark 1).
primary_spec_vector <- specimen_rotated[2, ] - specimen_rotated[1, ]
primary_spec_vector <- primary_spec_vector / norm(primary_spec_vector, type = "2")
# Calculate the angle between the specimen primary axis and the target axis ([1,0,0]).
dotval <- sum(primary_spec_vector * primary_ref_vector)
# Ensure dotval is between -1 and 1
dotval <- min(max(dotval, -1), 1)
angle_diff <- acos(dotval)
# If the difference is near 90째 (or another unexpected angle), apply an extra rotation.
if(abs(angle_diff - pi/2) < tol) {
# Define the correction: rotate by the difference (pi/2 - angle_diff) about an axis perpendicular to primary_spec_vector and target.
correction_angle <- (pi/2) - angle_diff
correction_axis <- cross(primary_spec_vector, primary_ref_vector)
if (norm(correction_axis, type = "2") > 1e-8) {
correction_axis <- correction_axis / norm(correction_axis, type = "2")
R_corr <- rotationMatrix(correction_angle, correction_axis)
specimen_rotated <- t(R_corr %*% t(specimen_rotated))
}
}
# Finally, translate the rotated specimen to the reference centroid.
aligned_landmarks[,,i] <- specimen_rotated + matrix(ref_centroid, nrow(specimen_rotated), 3, byrow = TRUE)
}
# Visualize: reference in red, specimen 2 (as an example) in blue.
open3d()
points3d(ref_landmarks, col = "red", size = 10)
points3d(aligned_landmarks[,,2], col = "blue", size = 10)
open3d()
colors <- distinctColorPalette(p) # Assign a unique color to each specimen
for (i in 1:n) {
coords <- ref_landmarks[, , i]
for (j in 1:p) {
spheres3d(coords[j, 1], coords[j, 2], coords[j, 3], radius = 0.0025, color = colors[j])
}
}
View(ref_landmarks)
for (i in 1:n) {
coords <- aligned_landmarks[, , i]
for (j in 1:p) {
spheres3d(coords[j, 1], coords[j, 2], coords[j, 3], radius = 0.0025, color = colors[j])
}
}
open3d()
colors <- distinctColorPalette(p) # Assign a unique color to each specimen
for (i in 1:n) {
coords <- aligned_landmarks[, , i]
for (j in 1:p) {
spheres3d(coords[j, 1], coords[j, 2], coords[j, 3], radius = 5, color = colors[j])
}
}
library(rgl)
library(geomorph)
library(randomcoloR)
library(Morpho)
library(Rvcg)
# Assume landmarks is a numeric 3D array: (num_points x 3 x num_specimens).
# Select a reference specimen (e.g., specimen 1).
# Install and load required packages:
# install.packages("pracma")  # for cross product and robust norm calculation
library(geomorph)
library(rgl)
library(pracma)
# Assume that "landmarks" is your 3D array with dimensions:
#    num_points x 3 x num_specimens
# For example:
# landmarks <- array(data = your_landmark_data, dim = c(num_points, 3, num_specimens))
# Choose the reference specimen that will define the orientation/plane.
files <- list.files(path = "C:/Users/Public/Documents/Git/Jax-Programs/R/Skull Landmarking Results/", pattern="\\.csv$", full.names=TRUE, recursive=TRUE)
# Read and process each file
landmark_list <- list()
label_list <- list()
for (file in files) {
data <- read.csv(file, skip = 1)
labels <- data[, c("Name")] # Save first column (landmark labels)
landmark_list[[length(landmark_list) + 1]] <- as.matrix(data[, c("X", "Y", "Z")])
label_list[[length(label_list) + 1]] <- labels
}
p <- nrow(landmark_list[[1]])
k <- 3
n <- length(landmark_list)
landmarks <- array(unlist(landmark_list), dim = c(p, k, n))
gpa <- gpagen(landmarks)
plotAllSpecimens(gpa$coords)
procD <- sum((gpa$coords - gpa$mshape)^2)
print(procD)
stl_mesh <- vcgImport("C:/Users/Public/Documents/Git/Jax-Programs/R/Skull Landmarking Results/113_skull.stl")
simplified_mesh <- vcgQEdecim(stl_mesh, percent = 0.05)
# Retrieve the specimen's original landmarks and corresponding GPA-aligned landmarks.
orig_lm    <- landmarks[,,specimen_index]    # Original specimen landmarks
specimen_index = length(files) - 5
# Retrieve the specimen's original landmarks and corresponding GPA-aligned landmarks.
orig_lm    <- landmarks[,,specimen_index]    # Original specimen landmarks
aligned_lm <- gpa$coords[,,specimen_index]     # GPA-aligned landmarks
# Compute the centroids (means)
orig_centroid    <- colMeans(orig_lm)
aligned_centroid <- colMeans(aligned_lm)
# Center the original specimen landmarks
A <- sweep(orig_lm, 2, orig_centroid, FUN = "-")
B <- sweep(aligned_lm, 2, aligned_centroid, FUN = "-")
# Compute centroid sizes (using all points)
cs_orig    <- sqrt(sum(A^2))
cs_aligned <- sqrt(sum(B^2))
scale_factor <- cs_aligned / cs_orig
# Compute the best-fit rotation via SVD:
svd_out <- svd(t(A) %*% B)
R <- svd_out$v %*% t(svd_out$u)
if (det(R) < 0) {
svd_out$v[,3] <- -svd_out$v[,3]
R <- svd_out$v %*% t(svd_out$u)
}
# -------------------------------
# Step 5: Apply the transformation to the decimated STL mesh
# -------------------------------
# Extract STL vertices. In an rgl mesh3d object, vertices are in the vb slot as a 4 x n matrix.
stl_coords <- t(scaled_mesh$vb[1:3, ])  # n_vertices x 3 matrix
scaled_mesh <- simplified_mesh
# -------------------------------
# Step 5: Apply the transformation to the decimated STL mesh
# -------------------------------
# Extract STL vertices. In an rgl mesh3d object, vertices are in the vb slot as a 4 x n matrix.
stl_coords <- t(scaled_mesh$vb[1:3, ])  # n_vertices x 3 matrix
# Compute the centroid of the STL mesh vertices (from the decimated mesh).
mesh_centroid <- colMeans(stl_coords)
# Center the mesh vertices using its own centroid.
centered_mesh <- sweep(stl_coords, 2, mesh_centroid, FUN = "-")
# Scale the mesh vertices by the computed scale factor.
scaled_mesh <- centered_mesh * scale_factor
# Rotate the scaled vertices using the computed rotation matrix.
rotated_mesh <- scaled_mesh %*% R
# Translate the rotated vertices so that the mesh is positioned along with the GPA-aligned landmarks.
transformed_mesh <- rotated_mesh + matrix(aligned_centroid, nrow(rotated_mesh), 3, byrow = TRUE)
# Replace the vertices in the decimated mesh.
new_vb <- rbind(t(transformed_mesh), rep(1, nrow(transformed_mesh)))
scaled_mesh$vb <- new_vb
# -------------------------------
# Step 6: Visualization
# -------------------------------
open3d()  # Open a new 3D window
# Plot all GPA-aligned specimens in red.
plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Plot all GPA-aligned specimens in red.
plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Plot all GPA-aligned specimens in red.
colors <- distinctColorPalette(p) # Assign a unique color to each specimen
# -------------------------------
# Step 6: Visualization
# -------------------------------
open3d()  # Open a new 3D window
for (i in 1:n) {
coords <- gpa$coords[, , i]
for (j in 1:p) {
spheres3d(coords[j, 1], coords[j, 2], coords[j, 3], radius = 0.0025, color = colors[j])
}
}
#plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Overlay the transformed, decimated STL mesh in semitransparent gray.
shade3d(scaled_mesh, color = "gray", alpha = 0.5)
View(scaled_mesh)
scaled_mesh <- simplified_mesh
# Retrieve the specimen's original landmarks and corresponding GPA-aligned landmarks.
orig_lm    <- landmarks[,,specimen_index]    # Original specimen landmarks
aligned_lm <- gpa$coords[,,specimen_index]     # GPA-aligned landmarks
# Compute the centroids (means)
orig_centroid    <- colMeans(orig_lm)
aligned_centroid <- colMeans(aligned_lm)
# Center the original specimen landmarks
A <- sweep(orig_lm, 2, orig_centroid, FUN = "-")
B <- sweep(aligned_lm, 2, aligned_centroid, FUN = "-")
# Compute centroid sizes (using all points)
cs_orig    <- sqrt(sum(A^2))
cs_aligned <- sqrt(sum(B^2))
scale_factor <- cs_aligned / cs_orig
# Compute the best-fit rotation via SVD:
svd_out <- svd(t(A) %*% B)
R <- svd_out$v %*% t(svd_out$u)
if (det(R) < 0) {
svd_out$v[,3] <- -svd_out$v[,3]
R <- svd_out$v %*% t(svd_out$u)
}
# -------------------------------
# Step 5: Apply the transformation to the decimated STL mesh
# -------------------------------
# Extract STL vertices. In an rgl mesh3d object, vertices are in the vb slot as a 4 x n matrix.
stl_coords <- t(scaled_mesh$vb[1:3, ])  # n_vertices x 3 matrix
# Compute the centroid of the STL mesh vertices (from the decimated mesh).
mesh_centroid <- colMeans(stl_coords)
# Center the mesh vertices using its own centroid.
centered_mesh <- sweep(stl_coords, 2, mesh_centroid, FUN = "-")
# Scale the mesh vertices by the computed scale factor.
scaled_mesh <- centered_mesh * scale_factor
# Rotate the scaled vertices using the computed rotation matrix.
rotated_mesh <- scaled_mesh %*% R
# Translate the rotated vertices so that the mesh is positioned along with the GPA-aligned landmarks.
transformed_mesh <- rotated_mesh + matrix(aligned_centroid, nrow(rotated_mesh), 3, byrow = TRUE)
# Replace the vertices in the decimated mesh.
new_vb <- rbind(t(transformed_mesh), rep(1, nrow(transformed_mesh)))
scaled_mesh$vb <- new_vb
new_mesh <- tmesh3d(
vertices = t(transformed_mesh),   # vertices as 3 x n matrix
indices = simplified_mesh$it,      # face indices; adjust if needed (sometimes "ib" or others)
homogeneous = TRUE
)
View(new_mesh)
scaled_mesh <- simplified_mesh
new_mesh <- tmesh3d(
vertices = t(transformed_mesh),   # vertices as 3 x n matrix
indices = simplified_mesh$it,      # face indices; adjust if needed (sometimes "ib" or others)
homogeneous = TRUE
)
View(new_mesh)
#plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Overlay the transformed, decimated STL mesh in semitransparent gray.
shade3d(new_mesh, color = "gray", alpha = 0.5)
rgl.pop()
# -------------------------------
# Step 6: Visualization
# -------------------------------
open3d()  # Open a new 3D window
for (i in 1:n) {
coords <- gpa$coords[, , i] * gpa$Csize[i]
for (j in 1:p) {
spheres3d(coords[j, 1], coords[j, 2], coords[j, 3], radius = 0.0025, color = colors[j])
}
}
open3d()  # Open a new 3D window
# Plot all GPA-aligned specimens in red.
colors <- distinctColorPalette(p) # Assign a unique color to each specimen
for (i in 1:n) {
coords <- gpa$coords[, , i] * gpa$Csize[i]
for (j in 1:p) {
spheres3d(coords[j, 1], coords[j, 2], coords[j, 3], radius = 5, color = colors[j])
}
}
#plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Overlay the transformed, decimated STL mesh in semitransparent gray.
shade3d(new_mesh, color = "gray", alpha = 0.5)
rgl.pop()
#plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Overlay the transformed, decimated STL mesh in semitransparent gray.
shade3d(simplified_mesh, color = "gray", alpha = 0.5)
rgl.pop()
scaled_mesh <- simplified_mesh
# Retrieve the specimen's original landmarks and corresponding GPA-aligned landmarks.
orig_lm    <- landmarks[,,specimen_index]    # Original specimen landmarks
aligned_lm <- gpa$coords[,,specimen_index]     # GPA-aligned landmarks
# Compute the centroids (means)
orig_centroid    <- colMeans(orig_lm)
aligned_centroid <- colMeans(aligned_lm)
# Center the original specimen landmarks
A <- sweep(orig_lm, 2, orig_centroid, FUN = "-")
B <- sweep(aligned_lm, 2, aligned_centroid, FUN = "-")
# Compute centroid sizes (using all points)
cs_orig    <- sqrt(sum(A^2))
cs_aligned <- sqrt(sum(B^2))
scale_factor <- cs_aligned / cs_orig
# Compute the best-fit rotation via SVD:
svd_out <- svd(t(A) %*% B)
R <- svd_out$v %*% t(svd_out$u)
if (det(R) < 0) {
svd_out$v[,3] <- -svd_out$v[,3]
R <- svd_out$v %*% t(svd_out$u)
}
# -------------------------------
# Step 5: Apply the transformation to the decimated STL mesh
# -------------------------------
# Extract STL vertices. In an rgl mesh3d object, vertices are in the vb slot as a 4 x n matrix.
stl_coords <- t(scaled_mesh$vb[1:3, ])  # n_vertices x 3 matrix
# Compute the centroid of the STL mesh vertices (from the decimated mesh).
mesh_centroid <- colMeans(stl_coords)
# Center the mesh vertices using its own centroid.
centered_mesh <- sweep(stl_coords, 2, mesh_centroid, FUN = "-")
# Rotate the scaled vertices using the computed rotation matrix.
rotated_mesh <- centered_mesh %*% R
# Translate the rotated vertices so that the mesh is positioned along with the GPA-aligned landmarks.
transformed_mesh <- rotated_mesh + matrix(aligned_centroid, nrow(rotated_mesh), 3, byrow = TRUE)
# Replace the vertices in the decimated mesh.
new_vb <- rbind(t(transformed_mesh), rep(1, nrow(transformed_mesh)))
scaled_mesh$vb <- new_vb
new_mesh <- tmesh3d(
vertices = t(transformed_mesh),   # vertices as 3 x n matrix
indices = simplified_mesh$it,      # face indices; adjust if needed (sometimes "ib" or others)
homogeneous = TRUE
)
#plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Overlay the transformed, decimated STL mesh in semitransparent gray.
shade3d(simplified_mesh, color = "gray", alpha = 0.5)
rgl.pop()
new_mesh <- tmesh3d(
vertices = t(transformed_mesh),   # vertices as 3 x n matrix
indices = scaled_mesh$it,      # face indices; adjust if needed (sometimes "ib" or others)
homogeneous = TRUE
)
#plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Overlay the transformed, decimated STL mesh in semitransparent gray.
shade3d(simplified_mesh, color = "gray", alpha = 0.5)
rgl.pop()
#plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Overlay the transformed, decimated STL mesh in semitransparent gray.
shade3d(new_mesh, color = "gray", alpha = 0.5)
scaled_mesh <- simplified_mesh
# -------------------------------
# Step 5: Apply the transformation to the decimated STL mesh
# -------------------------------
# Extract STL vertices. In an rgl mesh3d object, vertices are in the vb slot as a 4 x n matrix.
stl_coords <- t(scaled_mesh$vb[1:3, ])  # n_vertices x 3 matrix
transformed_mesh <- t( R %*% t( (stl_coords - matrix(orig_centroid, nrow(stl_coords), 3, byrow = TRUE)) * scale_factor ) ) + matrix(aligned_centroid, nrow(stl_coords), 3, byrow = TRUE)
new_mesh <- tmesh3d(
vertices = t(transformed_mesh),   # Must be 3 x n
indices  = scaled_mesh$it,         # Adjust this slot name if your object uses "ib" or similar
homogeneous = TRUE
)
open3d()  # Open a new 3D window
# Plot all GPA-aligned specimens in red.
colors <- distinctColorPalette(p) # Assign a unique color to each specimen
for (i in 1:n) {
coords <- gpa$coords[, , i] * gpa$Csize[i]
for (j in 1:p) {
spheres3d(coords[j, 1], coords[j, 2], coords[j, 3], radius = 5, color = colors[j])
}
}
#plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Overlay the transformed, decimated STL mesh in semitransparent gray.
shade3d(new_mesh, color = "gray", alpha = 0.5)
rgl.pop()
rm(new_mesh)
transformed_mesh <- t( R %*% t( (stl_coords - matrix(orig_centroid, nrow(stl_coords), 3, byrow = TRUE)) ) ) + matrix(aligned_centroid, nrow(stl_coords), 3, byrow = TRUE)
new_mesh <- tmesh3d(
vertices = t(transformed_mesh),   # Must be 3 x n
indices  = scaled_mesh$it,         # Adjust this slot name if your object uses "ib" or similar
homogeneous = TRUE
)
#plotAllSpecimens(gpa$coords, col = "red", pch = 16, cex = 1.5)
# Overlay the transformed, decimated STL mesh in semitransparent gray.
shade3d(new_mesh, color = "gray", alpha = 0.5)
